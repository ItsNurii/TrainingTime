/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package adrover.trainingtime.views;

import adrover.trainingtime.Main;
import adrover.trainingtime.dataaccess.DataAccess;
import adrover.trainingtime.dtos.Exercise;
import adrover.trainingtime.dtos.ExerciseWorkout;
import adrover.trainingtime.dtos.Usuari;
import adrover.trainingtime.dtos.Workouts;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nuria
 */
public class ListUsers extends javax.swing.JPanel {

    private Main jFrameMain;
    private DataAccess da = new DataAccess();
    private Usuari instructor;
    private ArrayList<Usuari> listaUsuarios;
    private ArrayList<Workouts> listaWorkouts;
    private ArrayList<Exercise> listaExercise;
    private Usuari usuariSelected;

    /**
     * Creates new form ListUsuaris
     */
    public ListUsers(Main jFrameMain, Usuari instructor) {
        initComponents();
        this.setSize(800, 600);
        this.jFrameMain = jFrameMain;
        this.instructor = instructor;
        startWorkoutsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogWorkouts = new javax.swing.JDialog();
        jButtonAddTrain = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jPanelDate = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerDate = new javax.swing.JSpinner();
        jPanelUser = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxUsers = new javax.swing.JComboBox<>();
        jPanelComments = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldComments = new javax.swing.JTextField();
        jDialogExercise = new javax.swing.JDialog();
        jButtonAddExercise = new javax.swing.JButton();
        jButtonCancelExercise = new javax.swing.JButton();
        jPanelUser2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldExercise = new javax.swing.JTextField();
        jPanelComments2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldDescription = new javax.swing.JTextField();
        jDialogModify = new javax.swing.JDialog();
        jButtonAddModification = new javax.swing.JButton();
        jButtonCancelModification = new javax.swing.JButton();
        jPanelUser3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldModificationName = new javax.swing.JTextField();
        jPanelComments3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldModificationDescription = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButtonUsers = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListUsers = new javax.swing.JList<>();
        jPanelWorkouts = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableWorkouts = new javax.swing.JTable();
        jButtonCreateWorkout = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListExercises = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableExercises = new javax.swing.JTable();
        jButtonShowExercises = new javax.swing.JButton();
        jButtonCreateExercise = new javax.swing.JButton();
        jButtonModifyExercise = new javax.swing.JButton();
        jButtonDeleteExercise = new javax.swing.JButton();
        jButtonAddExToWork = new javax.swing.JButton();

        jDialogWorkouts.setMinimumSize(new java.awt.Dimension(400, 300));
        jDialogWorkouts.getContentPane().setLayout(null);

        jButtonAddTrain.setText("Add");
        jButtonAddTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTrainActionPerformed(evt);
            }
        });
        jDialogWorkouts.getContentPane().add(jButtonAddTrain);
        jButtonAddTrain.setBounds(90, 20, 52, 23);

        jButtonEdit.setText("Cancel");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });
        jDialogWorkouts.getContentPane().add(jButtonEdit);
        jButtonEdit.setBounds(230, 20, 80, 23);

        jPanelDate.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelDate.setLayout(null);

        jLabel2.setText("Date");
        jPanelDate.add(jLabel2);
        jLabel2.setBounds(40, 20, 50, 16);

        jSpinnerDate.setModel(new javax.swing.SpinnerDateModel());
        jPanelDate.add(jSpinnerDate);
        jSpinnerDate.setBounds(150, 10, 150, 30);

        jDialogWorkouts.getContentPane().add(jPanelDate);
        jPanelDate.setBounds(50, 60, 320, 50);

        jPanelUser.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelUser.setLayout(null);

        jLabel3.setText("User");
        jPanelUser.add(jLabel3);
        jLabel3.setBounds(40, 10, 60, 30);

        jComboBoxUsers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Users" }));
        jComboBoxUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxUsersActionPerformed(evt);
            }
        });
        jPanelUser.add(jComboBoxUsers);
        jComboBoxUsers.setBounds(140, 10, 160, 22);

        jDialogWorkouts.getContentPane().add(jPanelUser);
        jPanelUser.setBounds(50, 130, 320, 50);

        jPanelComments.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelComments.setLayout(null);

        jLabel1.setText("Comment:");
        jPanelComments.add(jLabel1);
        jLabel1.setBounds(20, 10, 70, 30);

        jTextFieldComments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCommentsActionPerformed(evt);
            }
        });
        jPanelComments.add(jTextFieldComments);
        jTextFieldComments.setBounds(130, 10, 160, 30);

        jDialogWorkouts.getContentPane().add(jPanelComments);
        jPanelComments.setBounds(50, 200, 320, 50);

        jDialogExercise.setMinimumSize(new java.awt.Dimension(400, 300));
        jDialogExercise.getContentPane().setLayout(null);

        jButtonAddExercise.setText("Add");
        jButtonAddExercise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddExerciseActionPerformed(evt);
            }
        });
        jDialogExercise.getContentPane().add(jButtonAddExercise);
        jButtonAddExercise.setBounds(90, 20, 52, 23);

        jButtonCancelExercise.setText("Cancel");
        jButtonCancelExercise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelExerciseActionPerformed(evt);
            }
        });
        jDialogExercise.getContentPane().add(jButtonCancelExercise);
        jButtonCancelExercise.setBounds(230, 20, 80, 23);

        jPanelUser2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelUser2.setLayout(null);

        jLabel8.setText("Exercise Name");
        jPanelUser2.add(jLabel8);
        jLabel8.setBounds(30, 10, 100, 30);
        jPanelUser2.add(jTextFieldExercise);
        jTextFieldExercise.setBounds(160, 10, 140, 30);

        jDialogExercise.getContentPane().add(jPanelUser2);
        jPanelUser2.setBounds(50, 70, 320, 50);

        jPanelComments2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelComments2.setLayout(null);

        jLabel9.setText("Description");
        jPanelComments2.add(jLabel9);
        jLabel9.setBounds(20, 10, 70, 30);

        jTextFieldDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDescriptionActionPerformed(evt);
            }
        });
        jPanelComments2.add(jTextFieldDescription);
        jTextFieldDescription.setBounds(140, 10, 160, 30);

        jDialogExercise.getContentPane().add(jPanelComments2);
        jPanelComments2.setBounds(50, 140, 320, 50);

        jDialogModify.setMinimumSize(new java.awt.Dimension(400, 300));
        jDialogModify.getContentPane().setLayout(null);

        jButtonAddModification.setText("Modify");
        jButtonAddModification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddModificationActionPerformed(evt);
            }
        });
        jDialogModify.getContentPane().add(jButtonAddModification);
        jButtonAddModification.setBounds(90, 20, 80, 23);

        jButtonCancelModification.setText("Cancel");
        jButtonCancelModification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelModificationActionPerformed(evt);
            }
        });
        jDialogModify.getContentPane().add(jButtonCancelModification);
        jButtonCancelModification.setBounds(230, 20, 80, 23);

        jPanelUser3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelUser3.setLayout(null);

        jLabel10.setText("Exercise Name");
        jPanelUser3.add(jLabel10);
        jLabel10.setBounds(30, 10, 100, 30);
        jPanelUser3.add(jTextFieldModificationName);
        jTextFieldModificationName.setBounds(160, 10, 140, 30);

        jDialogModify.getContentPane().add(jPanelUser3);
        jPanelUser3.setBounds(50, 70, 320, 50);

        jPanelComments3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelComments3.setLayout(null);

        jLabel11.setText("Description");
        jPanelComments3.add(jLabel11);
        jLabel11.setBounds(20, 10, 70, 30);

        jTextFieldModificationDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldModificationDescriptionActionPerformed(evt);
            }
        });
        jPanelComments3.add(jTextFieldModificationDescription);
        jTextFieldModificationDescription.setBounds(140, 10, 160, 30);

        jDialogModify.getContentPane().add(jPanelComments3);
        jPanelComments3.setBounds(50, 140, 320, 50);

        setBackground(new java.awt.Color(255, 204, 153));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "USERS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.setMinimumSize(new java.awt.Dimension(400, 400));
        jPanel2.setLayout(null);

        jButtonUsers.setText("Show Users");
        jButtonUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUsersActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonUsers);
        jButtonUsers.setBounds(30, 20, 90, 23);

        jListUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListUsersValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListUsers);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(20, 50, 110, 160);

        add(jPanel2);
        jPanel2.setBounds(10, 10, 150, 260);

        jPanelWorkouts.setBackground(new java.awt.Color(255, 255, 204));
        jPanelWorkouts.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "WORKOUTS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelWorkouts.setForeground(new java.awt.Color(0, 0, 0));
        jPanelWorkouts.setLayout(null);

        jTableWorkouts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jTableWorkouts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableWorkoutsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableWorkouts);

        jPanelWorkouts.add(jScrollPane3);
        jScrollPane3.setBounds(10, 50, 300, 210);

        jButtonCreateWorkout.setText("Create Workout");
        jButtonCreateWorkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateWorkoutActionPerformed(evt);
            }
        });
        jPanelWorkouts.add(jButtonCreateWorkout);
        jButtonCreateWorkout.setBounds(10, 20, 113, 23);

        add(jPanelWorkouts);
        jPanelWorkouts.setBounds(170, 10, 320, 280);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EXERCISES from WORKOUTS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel1.setLayout(null);

        jListExercises.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListExercisesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListExercises);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 20, 230, 160);

        add(jPanel1);
        jPanel1.setBounds(500, 80, 280, 190);

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EXERCISES", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel3.setLayout(null);

        jTableExercises.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableExercises.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableExercisesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableExercises);

        jPanel3.add(jScrollPane4);
        jScrollPane4.setBounds(10, 20, 220, 170);

        jButtonShowExercises.setText("Show Exercises");
        jButtonShowExercises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowExercisesActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonShowExercises);
        jButtonShowExercises.setBounds(240, 40, 120, 23);

        jButtonCreateExercise.setText("Create Exercise");
        jButtonCreateExercise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateExerciseActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonCreateExercise);
        jButtonCreateExercise.setBounds(240, 80, 120, 23);

        jButtonModifyExercise.setText("Modify Exercise");
        jButtonModifyExercise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifyExerciseActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonModifyExercise);
        jButtonModifyExercise.setBounds(240, 120, 120, 23);

        jButtonDeleteExercise.setText("Delete Exercise");
        jButtonDeleteExercise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteExerciseActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonDeleteExercise);
        jButtonDeleteExercise.setBounds(240, 160, 120, 23);

        add(jPanel3);
        jPanel3.setBounds(170, 300, 380, 200);

        jButtonAddExToWork.setText("Add exercise to workout");
        jButtonAddExToWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddExToWorkActionPerformed(evt);
            }
        });
        add(jButtonAddExToWork);
        jButtonAddExToWork.setBounds(560, 30, 170, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUsersActionPerformed
        int instructorId = instructor.getId();
        ArrayList<Usuari> usuaris = da.getUsuarisByInstructor(instructorId);
        DefaultListModel<String> listaUsuaris = new DefaultListModel<>();
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();

        // Guarda los objetos completos en listaUsuarios
        listaUsuarios = usuaris;

        // Agrega solo los nombres al modelo de la lista
        for (Usuari u : usuaris) {
            listaUsuaris.addElement(u.getNom()); // o el método que devuelva el nombre
            comboBoxModel.addElement(u.getNom());
        }

        jListUsers.setModel(listaUsuaris); // Asigna el modelo a jListUsers
        jComboBoxUsers.setModel(comboBoxModel);

        // Resetear la selección para actualizar la visualización
        jComboBoxUsers.setSelectedIndex(0); // Deselecciona cualquier elemento
    }//GEN-LAST:event_jButtonUsersActionPerformed

    private void jButtonAddTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTrainActionPerformed

        if (usuariSelected == null || usuariSelected.getId() == 0) {
            JOptionPane.showMessageDialog(this, "Please select a validated user", "Error", JOptionPane.ERROR_MESSAGE);
            return;  // Detener la ejecución del código
        }
        // Obtiene el texto de los comentarios del w
        String comments = jTextFieldComments.getText();

        // Usuari usuariSelected = (Usuari) jComboBoxUsers.getSelectedItem();
        // Verificar si se seleccionó un usuario válido (no la opción "Seleccionar usuario")
        // Obtiene el ID del usuario seleccionado
        int userId = usuariSelected.getId();
        Date dateWork = (Date) jSpinnerDate.getValue();
        // Formatea la fecha en formato adecuado para la base de datos
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String fecha = dateFormat.format(dateWork);

        // Crear un nuevo objeto Workouts
        Workouts nuevoWorkout = new Workouts();
        nuevoWorkout.setForDate(fecha);
        nuevoWorkout.setUserId(userId);
        nuevoWorkout.setComments(comments);
        // Aquí puedes guardar el nuevo workout en la base de datos o en memoria
        da.insertToWorkoutTable(nuevoWorkout);

        // Mostrar un mensaje de éxito
        JOptionPane.showMessageDialog(this, "Workout correctly created");
        jDialogWorkouts.dispose();

        // Recargar la lista de Workouts para el usuario seleccionado
        updateWorkoutsTable(userId);
    }//GEN-LAST:event_jButtonAddTrainActionPerformed

    private void startWorkoutsTable() {
        DefaultTableModel workoutsTableModel = new DefaultTableModel();
        workoutsTableModel.addColumn("Workouts Id"); // Columna para la fecha
        workoutsTableModel.addColumn("Date"); // Columna para comentarios u otros detalles
        workoutsTableModel.addColumn("Comments");
        jTableWorkouts.setModel(workoutsTableModel); // Establece el modelo de tabla para el JTable de entrenamientos
        jListExercises.setVisible(false);
    }

    // Method to fetch and display workouts for the selected user
    private void updateWorkoutsTable(int userId) {
        DefaultTableModel dtm = (DefaultTableModel) jTableWorkouts.getModel();
        dtm.setRowCount(0);
        // Obtiene la lista de entrenamientos para el usuario seleccionado
        ArrayList<Workouts> workouts = da.getWorkoutsPerUser(userId);
        listaWorkouts = workouts;

        // Agrega los entrenamientos al modelo de tabla
        for (Workouts workout : workouts) {
            dtm.addRow(new Object[]{workout.getId(), workout.getForDate(), workout.getComments()});
        }
    }

    private void jListUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListUsersValueChanged
        // Verifica que se ha seleccionado un usuario válido
        int selectedIndex = jListUsers.getSelectedIndex();
        if (selectedIndex != -1) { // Verifica que haya un índice seleccionado
            String selectedUserName = jListUsers.getSelectedValue();

            // Busca el objeto Usuari correspondiente al nombre seleccionado
            Usuari selectedUser = null;
            for (Usuari usuario : listaUsuarios) {
                if (usuario.getNom().equals(selectedUserName)) {
                    selectedUser = usuario;
                    break;
                }
            }

            if (selectedUser != null) {
                int userId = selectedUser.getId();
                updateWorkoutsTable(userId);  // Muestra los workouts para el usuario seleccionado
                usuariSelected = selectedUser;
            }
        }
    }//GEN-LAST:event_jListUsersValueChanged

    private void showExerciceFromWorkout(ArrayList<Exercise> listaExercise) {
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (Exercise ex : listaExercise) {
            listModel.addElement(ex.getNomExercici() + " " + ex.getDescripcio());
        }
        jListExercises.setModel(listModel);
    }

    private void jTableWorkoutsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableWorkoutsMouseClicked
        int selectedRow = jTableWorkouts.getSelectedRow();
        if (selectedRow != -1) {
            try {
                // Obtener el valor de la columna de ID y convertir a Integer
                Object idValue = jTableWorkouts.getValueAt(selectedRow, 0);
                int workoutId = (idValue instanceof Integer) ? (Integer) idValue : Integer.parseInt(idValue.toString());

                ArrayList<Exercise> exercicis = da.getExercicisPerWorkout(workoutId);
                showExerciceFromWorkout(exercicis);

                if (exercicis.isEmpty()) {
                    jListExercises.setVisible(false);
                } else {
                    jListExercises.setVisible(true);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error: The workout ID isn't valid");
            }
        }
    }//GEN-LAST:event_jTableWorkoutsMouseClicked

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        jDialogWorkouts.dispose();
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void jTextFieldCommentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCommentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCommentsActionPerformed

    private void jButtonCreateWorkoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateWorkoutActionPerformed
        jDialogWorkouts.setVisible(true);
        jDialogWorkouts.setLocationRelativeTo(this);


    }//GEN-LAST:event_jButtonCreateWorkoutActionPerformed

    private void jComboBoxUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxUsersActionPerformed
        // Obtén el usuario seleccionado del ComboBox
        String selectedUserName = (String) jComboBoxUsers.getSelectedItem();
        // Verifica si el usuario seleccionado es válido
        if (selectedUserName == null || selectedUserName.isEmpty()) {
            // Si no hay un usuario válido, muestra un mensaje
            JOptionPane.showMessageDialog(this, "Please select a valid user");
            // Busca el objeto Usuaris correspondiente al nombre seleccionado
            Usuari selectedUser = null;
            for (Usuari usuario : listaUsuarios) {
                if (usuario.getNom().equals(selectedUserName)) {
                    selectedUser = usuario;
                    break;
                }
            }
            if (selectedUser != null) {
                // Si el usuario es válido, almacena el usuario seleccionado
                usuariSelected = selectedUser;
            }
        }
    }//GEN-LAST:event_jComboBoxUsersActionPerformed

    private void updateExerciseTable(ArrayList<Exercise> exerciseList) {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"Id", "Exercise Name", "Description"});
        for (Exercise exercise : exerciseList) {
            model.addRow(new Object[]{Integer.valueOf(exercise.getId()), exercise.getNomExercici(), exercise.getDescripcio()}); // Muestra el nombre y la descripción
        }
        jTableExercises.setModel(model); // Asigna el modelo actualizado a jListExercises
        // Ocultar la columna de ID para que no sea visible al usuario
        jTableExercises.getColumnModel().getColumn(0).setMinWidth(0);
        jTableExercises.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    private void jButtonAddExerciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddExerciseActionPerformed
        // Guarda un nuevo ejercicio ingresado por el usuario
        String nombreExercici = jTextFieldExercise.getText();
        String descripcioExercici = jTextFieldDescription.getText();

        // Verifica que los campos no estén vacíos
        if (nombreExercici.isEmpty() || descripcioExercici.isEmpty()) {
            JOptionPane.showMessageDialog(jDialogExercise, "Please complete the fields", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Crear el nuevo ejercicio
        Exercise nuevoExercici = new Exercise();
        nuevoExercici.setNomExercici(nombreExercici);
        nuevoExercici.setDescripcio(descripcioExercici);

        // Guardar el ejercicio en la base de datos
        da.insertToExercice(nuevoExercici);

        // Mostrar mensaje de éxito
        JOptionPane.showMessageDialog(jDialogExercise, "Exercise correctly added", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Cerrar el diálogo
        jDialogExercise.dispose();

        // Obtener la lista actualizada de ejercicios desde la base de datos
        ArrayList<Exercise> exercicisList = da.getAllExercicis();

        // Actualizar la lista de ejercicios en la interfaz
        updateExerciseTable(exercicisList);
    }//GEN-LAST:event_jButtonAddExerciseActionPerformed

    private void jButtonCancelExerciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelExerciseActionPerformed
        jDialogExercise.setVisible(false);
    }//GEN-LAST:event_jButtonCancelExerciseActionPerformed

    private void jTextFieldDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescriptionActionPerformed

    private void jButtonCreateExerciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateExerciseActionPerformed
        jDialogExercise.setVisible(true);
        jDialogExercise.setLocationRelativeTo(this);
    }//GEN-LAST:event_jButtonCreateExerciseActionPerformed

    private void jButtonShowExercisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowExercisesActionPerformed
        // Obtener los ejercicios de la base de datos
        ArrayList<Exercise> exercicisList = da.getAllExercicis();
        // Verifica si la lista no está vacía
        updateExerciseTable(exercicisList);
    }//GEN-LAST:event_jButtonShowExercisesActionPerformed

    private void jButtonModifyExerciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifyExerciseActionPerformed
        String actionCommand = jButtonModifyExercise.getActionCommand();
        if (actionCommand != null && !actionCommand.isEmpty()) {

            jDialogModify.setVisible(true);
            jDialogModify.setLocationRelativeTo(this);
        } else {
            JOptionPane.showMessageDialog(this, "Please select an exercise before for modifying");
        }
    }//GEN-LAST:event_jButtonModifyExerciseActionPerformed

    private void jButtonAddModificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddModificationActionPerformed
        try {
            // Leer el ID del ejercicio almacenado en el ActionCommand de jButtonModificar
            String actionCommand = jButtonAddModification.getActionCommand();
            int id = Integer.parseInt(actionCommand);

            // Obtener los valores nuevos de los campos de texto
            String newName = jTextFieldModificationName.getText();
            String newDescripcio = jTextFieldModificationDescription.getText();

            // Llamar a getUpdateExercici para actualizar el ejercicio en la base de datos
            da.getUpdateModifiedExercici(id, newName, newDescripcio);

            // Actualizar la tabla y cerrar el cuadro de diálogo
            updateExerciseTable(da.getAllExercicis());
            jDialogModify.dispose();
            JOptionPane.showMessageDialog(this, "Exercise modified correctly");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: There's no exercise choosen valid");
        }
    }//GEN-LAST:event_jButtonAddModificationActionPerformed

    private void jButtonCancelModificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelModificationActionPerformed
        jDialogModify.setVisible(false);
    }//GEN-LAST:event_jButtonCancelModificationActionPerformed

    private void jTextFieldModificationDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldModificationDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldModificationDescriptionActionPerformed

    private void jListExercisesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListExercisesMouseClicked

    }//GEN-LAST:event_jListExercisesMouseClicked

    private void jButtonDeleteExerciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteExerciseActionPerformed
        int selectedRow = jTableExercises.getSelectedRow();
        if (selectedRow != -1) {
            try {
                // Obtener el ID del ejercicio (por ejemplo, en la primera columna)
                int id = (int) jTableExercises.getValueAt(selectedRow, 0);

                // Confirmar la eliminación
                int confirm = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete the exercise",
                        "Confirm deletion",
                        JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    // Llamar al método para eliminar el ejercicio
                    da.getDeleteEjercicio(id);

                    // Actualizar la tabla después de eliminar
                    updateExerciseTable(da.getAllExercicis());
                    // Mensaje de éxito
                    JOptionPane.showMessageDialog(this, "Exercise deleted correctly");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error trying to delete the exercise");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an exercise to delete");
        }
    }//GEN-LAST:event_jButtonDeleteExerciseActionPerformed

    private void jTableExercisesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableExercisesMouseClicked
        int selectedRow = jTableExercises.getSelectedRow();

        if (selectedRow != -1) {
            try {
                // Leer el ID directamente como un Integer desde la primera columna
                int id = (int) jTableExercises.getValueAt(selectedRow, 0);  // Columna 0 para ID

                String nombreEjercicio = (String) jTableExercises.getValueAt(selectedRow, 1);
                String descripcionEjercicio = (String) jTableExercises.getValueAt(selectedRow, 2);

                // Pre-cargar los valores en el formulario de modificación (sin abrirlo)
                jTextFieldModificationName.setText(nombreEjercicio);
                jTextFieldModificationDescription.setText(descripcionEjercicio);

                // Guardar el ID en el botón "Modificar" para usarlo luego en inicializarModificacion
                jButtonAddModification.setActionCommand(String.valueOf(id));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: Couldn't obtain the ID from the exercise");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an exercise for modifying it");
        }
    }//GEN-LAST:event_jTableExercisesMouseClicked

    private void jButtonAddExToWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddExToWorkActionPerformed
        int selectedRow = jTableWorkouts.getSelectedRow();
        if (selectedRow != -1) {
            // Obtener el ID del w (suponemos que el ID está en la primera columna)
            int workoutId = (int) jTableWorkouts.getValueAt(selectedRow, 0);  // O el índice correcto para el ID

            // Obtener los ejercicios seleccionados
            int[] selectedRowsExercicis = jTableExercises.getSelectedRows();  // Obtener filas seleccionadas en la tabla de ejercicios
            ArrayList<Exercise> selectedExercicis = new ArrayList<>();

            for (int rowIndex : selectedRowsExercicis) {
                // Obtener el valor de la celda de ID en la columna oculta (suponiendo que el ID está en la columna 0)
                Object exerciciIdValue = jTableExercises.getValueAt(rowIndex, 0);  // ID de la columna oculta

                int exerciciId;
                if (exerciciIdValue instanceof Integer) {
                    exerciciId = (Integer) exerciciIdValue;  // Si es Integer, lo usamos directamente
                } else {
                    throw new IllegalArgumentException("The value of exerciciId isn't correct, check it again");
                }

                // Crear un objeto Exercicis con el ID obtenido
                Exercise exercici = new Exercise();
                exercici.setId(exerciciId);  // Asignamos el ID
                selectedExercicis.add(exercici);
            }

            // Para cada ejercicio seleccionado, crear la relación en la base de datos
            for (Exercise exercici : selectedExercicis) {
                ExerciseWorkout workoutExercici = new ExerciseWorkout();
                workoutExercici.setIdWorkout(workoutId);
                workoutExercici.setIdExerciseWork(exercici.getId());

                // Guardar la relación en la base de datos
                da.insertExToWork(workoutExercici);
            }

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Exercise added correctly to workout");

            // Actualizar la lista de ejercicios asignados al w
            ArrayList<Exercise> exercicis = da.getExercicisPerWorkout(workoutId);

        } else {
            JOptionPane.showMessageDialog(this, "Please select a workout");
        }
    }//GEN-LAST:event_jButtonAddExToWorkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddExToWork;
    private javax.swing.JButton jButtonAddExercise;
    private javax.swing.JButton jButtonAddModification;
    private javax.swing.JButton jButtonAddTrain;
    private javax.swing.JButton jButtonCancelExercise;
    private javax.swing.JButton jButtonCancelModification;
    private javax.swing.JButton jButtonCreateExercise;
    private javax.swing.JButton jButtonCreateWorkout;
    private javax.swing.JButton jButtonDeleteExercise;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonModifyExercise;
    private javax.swing.JButton jButtonShowExercises;
    private javax.swing.JButton jButtonUsers;
    private javax.swing.JComboBox<String> jComboBoxUsers;
    private javax.swing.JDialog jDialogExercise;
    private javax.swing.JDialog jDialogModify;
    private javax.swing.JDialog jDialogWorkouts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListExercises;
    private javax.swing.JList<String> jListUsers;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelComments;
    private javax.swing.JPanel jPanelComments2;
    private javax.swing.JPanel jPanelComments3;
    private javax.swing.JPanel jPanelDate;
    private javax.swing.JPanel jPanelUser;
    private javax.swing.JPanel jPanelUser2;
    private javax.swing.JPanel jPanelUser3;
    private javax.swing.JPanel jPanelWorkouts;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinnerDate;
    private javax.swing.JTable jTableExercises;
    private javax.swing.JTable jTableWorkouts;
    private javax.swing.JTextField jTextFieldComments;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldExercise;
    private javax.swing.JTextField jTextFieldModificationDescription;
    private javax.swing.JTextField jTextFieldModificationName;
    // End of variables declaration//GEN-END:variables
}
